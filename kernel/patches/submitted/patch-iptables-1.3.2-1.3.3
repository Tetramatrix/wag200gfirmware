diff -urN iptables-1.3.2/extensions/libip6t_length.c iptables-1.3.3/extensions/libip6t_length.c
--- iptables-1.3.2/extensions/libip6t_length.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libip6t_length.c	2005-07-20 04:40:55.000000000 +0200
@@ -30,7 +30,7 @@
 parse_length(const char *s)
 {
 
-	int len;
+	unsigned int len;
 	
 	if (string_to_number(s, 0, 0xFFFF, &len) == -1)
 		exit_error(PARAMETER_PROBLEM, "length invalid: `%s'\n", s);
diff -urN iptables-1.3.2/extensions/libip6t_NFQUEUE.c iptables-1.3.3/extensions/libip6t_NFQUEUE.c
--- iptables-1.3.2/extensions/libip6t_NFQUEUE.c	1970-01-01 01:00:00.000000000 +0100
+++ iptables-1.3.3/extensions/libip6t_NFQUEUE.c	2005-07-20 04:29:25.000000000 +0200
@@ -0,0 +1,113 @@
+/* Shared library add-on to ip666666tables for NFQ
+ *
+ * (C) 2005 by Harald Welte <laforge@netfilter.org>
+ *
+ * This program is distributed under the terms of GNU GPL v2, 1991
+ *
+ */
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+
+#include <ip6tables.h>
+#include <linux/netfilter_ipv6/ip6_tables.h>
+#include <linux/netfilter_ipv4/ipt_NFQUEUE.h>
+
+static void init(struct ip6t_entry_target *t, unsigned int *nfcache) 
+{
+}
+
+static void help(void) 
+{
+	printf(
+"NFQUEUE target options\n"
+"  --queue-num value		Send packet to QUEUE number <value>.\n"
+"  		                Valid queue numbers are 0-65535\n"
+);
+}
+
+static struct option opts[] = {
+	{ "queue-num", 1, 0, 'F' },
+	{ 0 }
+};
+
+static void
+parse_num(const char *s, struct ipt_NFQ_info *tinfo)
+{
+	unsigned int num;
+       
+	if (string_to_number(s, 0, 65535, &num) == -1)
+		exit_error(PARAMETER_PROBLEM,
+			   "Invalid queue number `%s'\n", s);
+
+    	tinfo->queuenum = num & 0xffff;
+    	return;
+}
+
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const struct ip6t_entry *entry,
+      struct ip6t_entry_target **target)
+{
+	struct ipt_NFQ_info *tinfo
+		= (struct ipt_NFQ_info *)(*target)->data;
+
+	switch (c) {
+	case 'F':
+		if (*flags)
+			exit_error(PARAMETER_PROBLEM, "NFQUEUE target: "
+				   "Only use --queue-num ONCE!");
+		parse_num(optarg, tinfo);
+	default:
+		return 0;
+	}
+
+	return 1;
+}
+
+static void
+final_check(unsigned int flags)
+{
+}
+
+/* Prints out the targinfo. */
+static void
+print(const struct ip6t_ip6 *ip,
+      const struct ip6t_entry_target *target,
+      int numeric)
+{
+	const struct ipt_NFQ_info *tinfo =
+		(const struct ipt_NFQ_info *)target->data;
+	printf("NFQUEUE num %u", tinfo->queuenum);
+}
+
+/* Saves the union ip6t_targinfo in parsable form to stdout. */
+static void
+save(const struct ip6t_ip6 *ip, const struct ip6t_entry_target *target)
+{
+	const struct ipt_NFQ_info *tinfo =
+		(const struct ipt_NFQ_info *)target->data;
+
+	printf("--queue-num %u ", tinfo->queuenum);
+}
+
+static struct ip6tables_target nfqueue = { 
+	.next		= NULL,
+	.name		= "NFQUEUE",
+	.version	= IPTABLES_VERSION,
+	.size		= IP6T_ALIGN(sizeof(struct ipt_NFQ_info)),
+	.userspacesize	= IP6T_ALIGN(sizeof(struct ipt_NFQ_info)),
+	.help		= &help,
+	.init		= &init,
+	.parse		= &parse,
+	.final_check	= &final_check,
+	.print		= &print,
+	.save		= &save,
+	.extra_opts	= opts
+};
+
+void _init(void)
+{
+	register_target6(&nfqueue);
+}
diff -urN iptables-1.3.2/extensions/libip6t_NFQUEUE.man iptables-1.3.3/extensions/libip6t_NFQUEUE.man
--- iptables-1.3.2/extensions/libip6t_NFQUEUE.man	1970-01-01 01:00:00.000000000 +0100
+++ iptables-1.3.3/extensions/libip6t_NFQUEUE.man	2005-07-28 16:55:56.000000000 +0200
@@ -0,0 +1,9 @@
+This target is an extension of the QUEUE target. As opposed to QUEUE, it allows
+you to put a packet into any specific queue, identified by its 16-bit queue
+number.  
+.TP
+It can only be used with Kernel versions 2.6.14 or later, since it requires
+the
+.B
+nfnetlink_queue
+kernel support.
diff -urN iptables-1.3.2/extensions/libip6t_physdev.c iptables-1.3.3/extensions/libip6t_physdev.c
--- iptables-1.3.2/extensions/libip6t_physdev.c	2005-06-24 18:34:18.000000000 +0200
+++ iptables-1.3.3/extensions/libip6t_physdev.c	2005-07-20 04:36:37.000000000 +0200
@@ -53,7 +53,8 @@
 		if (*flags & IP6T_PHYSDEV_OP_IN)
 			goto multiple_use;
 		check_inverse(optarg, &invert, &optind, 0);
-		parse_interface(argv[optind-1], info->physindev, info->in_mask);
+		parse_interface(argv[optind-1], info->physindev,
+				(unsigned char *)info->in_mask);
 		if (invert)
 			info->invert |= IP6T_PHYSDEV_OP_IN;
 		info->bitmask |= IP6T_PHYSDEV_OP_IN;
@@ -65,7 +66,7 @@
 			goto multiple_use;
 		check_inverse(optarg, &invert, &optind, 0);
 		parse_interface(argv[optind-1], info->physoutdev,
-				info->out_mask);
+				(unsigned char *)info->out_mask);
 		if (invert)
 			info->invert |= IP6T_PHYSDEV_OP_OUT;
 		info->bitmask |= IP6T_PHYSDEV_OP_OUT;
diff -urN iptables-1.3.2/extensions/libipt_comment.c iptables-1.3.3/extensions/libipt_comment.c
--- iptables-1.3.2/extensions/libipt_comment.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_comment.c	2005-07-20 04:32:51.000000000 +0200
@@ -30,7 +30,7 @@
 };
 
 static void
-parse_comment(const unsigned char *s, struct ipt_comment_info *info)
+parse_comment(const char *s, struct ipt_comment_info *info)
 {	
 	int slen = strlen(s);
 
@@ -38,7 +38,7 @@
 		exit_error(PARAMETER_PROBLEM,
 			"COMMENT must be shorter than %i characters", IPT_MAX_COMMENT_LEN);
 	}
-	strcpy(info->comment, s);
+	strcpy((char *)info->comment, s);
 }
 
 /* Function which parses command options; returns true if it
diff -urN iptables-1.3.2/extensions/libipt_DNAT.c iptables-1.3.3/extensions/libipt_DNAT.c
--- iptables-1.3.2/extensions/libipt_DNAT.c	2005-06-24 18:34:19.000000000 +0200
+++ iptables-1.3.3/extensions/libipt_DNAT.c	2005-07-22 14:13:50.000000000 +0200
@@ -143,7 +143,8 @@
 	int portok;
 
 	if (entry->ip.proto == IPPROTO_TCP
-	    || entry->ip.proto == IPPROTO_UDP)
+	    || entry->ip.proto == IPPROTO_UDP
+	    || entry->ip.proto == IPPROTO_ICMP)
 		portok = 1;
 	else
 		portok = 0;
diff -urN iptables-1.3.2/extensions/libipt_dscp.c iptables-1.3.3/extensions/libipt_dscp.c
--- iptables-1.3.2/extensions/libipt_dscp.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_dscp.c	2005-07-20 04:33:09.000000000 +0200
@@ -46,7 +46,7 @@
 };
 
 static void
-parse_dscp(const unsigned char *s, struct ipt_dscp_info *dinfo)
+parse_dscp(const char *s, struct ipt_dscp_info *dinfo)
 {
 	unsigned int dscp;
        
diff -urN iptables-1.3.2/extensions/libipt_DSCP.c iptables-1.3.3/extensions/libipt_DSCP.c
--- iptables-1.3.2/extensions/libipt_DSCP.c	2005-01-04 11:38:34.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_DSCP.c	2005-07-20 04:40:06.000000000 +0200
@@ -49,7 +49,7 @@
 };
 
 static void
-parse_dscp(const unsigned char *s, struct ipt_DSCP_info *dinfo)
+parse_dscp(const char *s, struct ipt_DSCP_info *dinfo)
 {
 	unsigned int dscp;
        
@@ -67,7 +67,7 @@
 
 
 static void
-parse_class(const unsigned char *s, struct ipt_DSCP_info *dinfo)
+parse_class(const char *s, struct ipt_DSCP_info *dinfo)
 {
 	unsigned int dscp = class_to_dscp(s);
 
diff -urN iptables-1.3.2/extensions/libipt_MASQUERADE.c iptables-1.3.3/extensions/libipt_MASQUERADE.c
--- iptables-1.3.2/extensions/libipt_MASQUERADE.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_MASQUERADE.c	2005-07-22 14:13:50.000000000 +0200
@@ -81,7 +81,8 @@
 		= (struct ip_nat_multi_range *)(*target)->data;
 
 	if (entry->ip.proto == IPPROTO_TCP
-	    || entry->ip.proto == IPPROTO_UDP)
+	    || entry->ip.proto == IPPROTO_UDP
+	    || entry->ip.proto == IPPROTO_ICMP)
 		portok = 1;
 	else
 		portok = 0;
diff -urN iptables-1.3.2/extensions/libipt_NFQUEUE.c iptables-1.3.3/extensions/libipt_NFQUEUE.c
--- iptables-1.3.2/extensions/libipt_NFQUEUE.c	1970-01-01 01:00:00.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_NFQUEUE.c	2005-07-20 04:26:21.000000000 +0200
@@ -0,0 +1,113 @@
+/* Shared library add-on to iptables for NFQ
+ *
+ * (C) 2005 by Harald Welte <laforge@netfilter.org>
+ *
+ * This program is distributed under the terms of GNU GPL v2, 1991
+ *
+ */
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+
+#include <iptables.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_NFQUEUE.h>
+
+static void init(struct ipt_entry_target *t, unsigned int *nfcache) 
+{
+}
+
+static void help(void) 
+{
+	printf(
+"NFQUEUE target options\n"
+"  --queue-num value		Send packet to QUEUE number <value>.\n"
+"  		                Valid queue numbers are 0-65535\n"
+);
+}
+
+static struct option opts[] = {
+	{ "queue-num", 1, 0, 'F' },
+	{ 0 }
+};
+
+static void
+parse_num(const char *s, struct ipt_NFQ_info *tinfo)
+{
+	unsigned int num;
+       
+	if (string_to_number(s, 0, 65535, &num) == -1)
+		exit_error(PARAMETER_PROBLEM,
+			   "Invalid queue number `%s'\n", s);
+
+    	tinfo->queuenum = num & 0xffff;
+    	return;
+}
+
+static int
+parse(int c, char **argv, int invert, unsigned int *flags,
+      const struct ipt_entry *entry,
+      struct ipt_entry_target **target)
+{
+	struct ipt_NFQ_info *tinfo
+		= (struct ipt_NFQ_info *)(*target)->data;
+
+	switch (c) {
+	case 'F':
+		if (*flags)
+			exit_error(PARAMETER_PROBLEM, "NFQUEUE target: "
+				   "Only use --queue-num ONCE!");
+		parse_num(optarg, tinfo);
+	default:
+		return 0;
+	}
+
+	return 1;
+}
+
+static void
+final_check(unsigned int flags)
+{
+}
+
+/* Prints out the targinfo. */
+static void
+print(const struct ipt_ip *ip,
+      const struct ipt_entry_target *target,
+      int numeric)
+{
+	const struct ipt_NFQ_info *tinfo =
+		(const struct ipt_NFQ_info *)target->data;
+	printf("NFQUEUE num %u", tinfo->queuenum);
+}
+
+/* Saves the union ipt_targinfo in parsable form to stdout. */
+static void
+save(const struct ipt_ip *ip, const struct ipt_entry_target *target)
+{
+	const struct ipt_NFQ_info *tinfo =
+		(const struct ipt_NFQ_info *)target->data;
+
+	printf("--queue-num %u ", tinfo->queuenum);
+}
+
+static struct iptables_target nfqueue = { 
+	.next		= NULL,
+	.name		= "NFQUEUE",
+	.version	= IPTABLES_VERSION,
+	.size		= IPT_ALIGN(sizeof(struct ipt_NFQ_info)),
+	.userspacesize	= IPT_ALIGN(sizeof(struct ipt_NFQ_info)),
+	.help		= &help,
+	.init		= &init,
+	.parse		= &parse,
+	.final_check	= &final_check,
+	.print		= &print,
+	.save		= &save,
+	.extra_opts	= opts
+};
+
+void _init(void)
+{
+	register_target(&nfqueue);
+}
diff -urN iptables-1.3.2/extensions/libipt_NFQUEUE.man iptables-1.3.3/extensions/libipt_NFQUEUE.man
--- iptables-1.3.2/extensions/libipt_NFQUEUE.man	1970-01-01 01:00:00.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_NFQUEUE.man	2005-07-28 16:55:39.000000000 +0200
@@ -0,0 +1,9 @@
+This target is an extension of the QUEUE target. As opposed to QUEUE, it allows
+you to put a packet into any specific queue, identified by its 16-bit queue
+number.  
+.TP
+It can only be used with Kernel versions 2.6.14 or later, since it requires
+the
+.B
+nfnetlink_queue
+kernel support.
diff -urN iptables-1.3.2/extensions/libipt_physdev.c iptables-1.3.3/extensions/libipt_physdev.c
--- iptables-1.3.2/extensions/libipt_physdev.c	2005-06-24 18:34:18.000000000 +0200
+++ iptables-1.3.3/extensions/libipt_physdev.c	2005-07-20 04:36:19.000000000 +0200
@@ -53,7 +53,8 @@
 		if (*flags & IPT_PHYSDEV_OP_IN)
 			goto multiple_use;
 		check_inverse(optarg, &invert, &optind, 0);
-		parse_interface(argv[optind-1], info->physindev, info->in_mask);
+		parse_interface(argv[optind-1], info->physindev,
+				(unsigned char *)info->in_mask);
 		if (invert)
 			info->invert |= IPT_PHYSDEV_OP_IN;
 		info->bitmask |= IPT_PHYSDEV_OP_IN;
@@ -65,7 +66,7 @@
 			goto multiple_use;
 		check_inverse(optarg, &invert, &optind, 0);
 		parse_interface(argv[optind-1], info->physoutdev,
-				info->out_mask);
+				(unsigned char *)info->out_mask);
 		if (invert)
 			info->invert |= IPT_PHYSDEV_OP_OUT;
 		info->bitmask |= IPT_PHYSDEV_OP_OUT;
diff -urN iptables-1.3.2/extensions/libipt_REDIRECT.c iptables-1.3.3/extensions/libipt_REDIRECT.c
--- iptables-1.3.2/extensions/libipt_REDIRECT.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_REDIRECT.c	2005-07-22 14:13:50.000000000 +0200
@@ -81,7 +81,8 @@
 	int portok;
 
 	if (entry->ip.proto == IPPROTO_TCP
-	    || entry->ip.proto == IPPROTO_UDP)
+	    || entry->ip.proto == IPPROTO_UDP
+	    || entry->ip.proto == IPPROTO_ICMP)
 		portok = 1;
 	else
 		portok = 0;
diff -urN iptables-1.3.2/extensions/libipt_rpc.c iptables-1.3.3/extensions/libipt_rpc.c
--- iptables-1.3.2/extensions/libipt_rpc.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_rpc.c	2005-07-20 04:48:32.000000000 +0200
@@ -89,7 +89,7 @@
 }
 
 
-static int k_atoi(signed char *string)
+static int k_atoi(char *string)
 {
 	unsigned int result = 0;
 	int maxoctet = IPT_RPC_CHAR_LEN;
diff -urN iptables-1.3.2/extensions/libipt_SNAT.c iptables-1.3.3/extensions/libipt_SNAT.c
--- iptables-1.3.2/extensions/libipt_SNAT.c	2005-06-24 18:34:18.000000000 +0200
+++ iptables-1.3.3/extensions/libipt_SNAT.c	2005-07-22 14:13:50.000000000 +0200
@@ -143,7 +143,8 @@
 	int portok;
 
 	if (entry->ip.proto == IPPROTO_TCP
-	    || entry->ip.proto == IPPROTO_UDP)
+	    || entry->ip.proto == IPPROTO_UDP
+	    || entry->ip.proto == IPPROTO_ICMP)
 		portok = 1;
 	else
 		portok = 0;
diff -urN iptables-1.3.2/extensions/libipt_tos.c iptables-1.3.3/extensions/libipt_tos.c
--- iptables-1.3.2/extensions/libipt_tos.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_tos.c	2005-07-20 04:37:28.000000000 +0200
@@ -48,10 +48,10 @@
 };
 
 static void
-parse_tos(const unsigned char *s, struct ipt_tos_info *info)
+parse_tos(const char *s, struct ipt_tos_info *info)
 {
 	unsigned int i;
-	unsigned int tos;
+	int tos;
 
 	if (string_to_number(s, 0, 255, &tos) != -1) {
 		if (tos == IPTOS_LOWDELAY
diff -urN iptables-1.3.2/extensions/libipt_TOS.c iptables-1.3.3/extensions/libipt_TOS.c
--- iptables-1.3.2/extensions/libipt_TOS.c	2005-01-04 11:38:37.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_TOS.c	2005-07-20 04:40:43.000000000 +0200
@@ -59,7 +59,7 @@
 }
 
 static void
-parse_tos(const unsigned char *s, struct ipt_tos_target_info *info)
+parse_tos(const char *s, struct ipt_tos_target_info *info)
 {
 	unsigned int i, tos;
 
diff -urN iptables-1.3.2/extensions/libipt_ttl.c iptables-1.3.3/extensions/libipt_ttl.c
--- iptables-1.3.2/extensions/libipt_ttl.c	2005-02-19 20:19:17.000000000 +0100
+++ iptables-1.3.3/extensions/libipt_ttl.c	2005-07-20 04:49:53.000000000 +0200
@@ -1,7 +1,7 @@
 /* Shared library add-on to iptables to add TTL matching support 
  * (C) 2000 by Harald Welte <laforge@gnumonks.org>
  *
- * $Id: libipt_ttl.c 3687 2005-02-14 13:13:04Z /C=DE/ST=Berlin/L=Berlin/O=Netfilter Project/OU=Development/CN=kaber/emailAddress=kaber@netfilter.org $
+ * $Id: libipt_ttl.c 4136 2005-07-19 22:03:49Z /C=DE/ST=Berlin/L=Berlin/O=Netfilter Project/OU=Development/CN=laforge/emailAddress=laforge@netfilter.org $
  *
  * This program is released under the terms of GNU GPL */
 
@@ -29,7 +29,7 @@
 		struct ipt_entry_match **match)
 {
 	struct ipt_ttl_info *info = (struct ipt_ttl_info *) (*match)->data;
-	int value;
+	unsigned int value;
 
 	check_inverse(optarg, &invert, &optind, 0);
 
diff -urN iptables-1.3.2/extensions/Makefile iptables-1.3.3/extensions/Makefile
--- iptables-1.3.2/extensions/Makefile	2004-11-18 23:52:12.000000000 +0100
+++ iptables-1.3.3/extensions/Makefile	2005-07-20 04:22:56.000000000 +0200
@@ -5,8 +5,8 @@
 # header files are present in the include/linux directory of this iptables
 # package (HW)
 #
-PF_EXT_SLIB:=ah addrtype comment connlimit connmark conntrack dscp ecn esp hashlimit helper icmp iprange length limit mac mark multiport owner physdev pkttype realm rpc sctp standard state tcp tcpmss tos ttl udp unclean CLASSIFY CONNMARK DNAT DSCP ECN LOG MARK MASQUERADE MIRROR NETMAP NOTRACK REDIRECT REJECT SAME SNAT TARPIT TCPMSS TOS TRACE TTL ULOG
-PF6_EXT_SLIB:=eui64 hl icmpv6 length limit mac mark multiport owner physdev standard tcp udp HL LOG MARK TRACE
+PF_EXT_SLIB:=ah addrtype comment connlimit connmark conntrack dscp ecn esp hashlimit helper icmp iprange length limit mac mark multiport owner physdev pkttype realm rpc sctp standard state tcp tcpmss tos ttl udp unclean CLASSIFY CONNMARK DNAT DSCP ECN LOG MARK MASQUERADE MIRROR NETMAP NFQUEUE NOTRACK REDIRECT REJECT SAME SNAT TARPIT TCPMSS TOS TRACE TTL ULOG
+PF6_EXT_SLIB:=eui64 hl icmpv6 length limit mac mark multiport owner physdev standard tcp udp HL LOG NFQUEUE MARK TRACE
 
 # Optionals
 PF_EXT_SLIB_OPTS:=$(foreach T,$(wildcard extensions/.*-test),$(shell KERNEL_DIR=$(KERNEL_DIR) $(T)))
diff -urN iptables-1.3.2/include/linux/netfilter_ipv4/ipt_NFQUEUE.h iptables-1.3.3/include/linux/netfilter_ipv4/ipt_NFQUEUE.h
--- iptables-1.3.2/include/linux/netfilter_ipv4/ipt_NFQUEUE.h	1970-01-01 01:00:00.000000000 +0100
+++ iptables-1.3.3/include/linux/netfilter_ipv4/ipt_NFQUEUE.h	2005-07-20 04:22:26.000000000 +0200
@@ -0,0 +1,16 @@
+/* iptables module for using NFQUEUE mechanism
+ *
+ * (C) 2005 Harald Welte <laforge@netfilter.org>
+ *
+ * This software is distributed under GNU GPL v2, 1991
+ * 
+*/
+#ifndef _IPT_NFQ_TARGET_H
+#define _IPT_NFQ_TARGET_H
+
+/* target info */
+struct ipt_NFQ_info {
+	u_int16_t queuenum;
+};
+
+#endif /* _IPT_DSCP_TARGET_H */
diff -urN iptables-1.3.2/ip6tables.8.in iptables-1.3.3/ip6tables.8.in
--- iptables-1.3.2/ip6tables.8.in	2004-10-10 11:56:27.000000000 +0200
+++ iptables-1.3.3/ip6tables.8.in	2005-07-28 17:05:59.000000000 +0200
@@ -73,7 +73,19 @@
 .I DROP
 means to drop the packet on the floor.
 .I QUEUE
-means to pass the packet to userspace (if supported by the kernel).
+means to pass the packet to userspace.  (How the packet can be received
+by a userspace process differs by the particular queue handler.  2.4.x
+and 2.6.x kernels up to 2.6.13 include the 
+.B
+ip_queue
+queue handler.  Kernels 2.6.14 and later additionally include the 
+.B
+nfnetlink_queue
+queue handler.  Packets with a target of QUEUE will be sent to queue number '0'
+in this case. Please also see the
+.B
+NFQUEUE
+target as described later in this man page.)
 .I RETURN
 means stop traversing this chain and resume at the next rule in the
 previous (calling) chain.  If the end of a built-in chain is reached
@@ -426,7 +438,8 @@
 .BR ip6tables-restore(8),
 .BR iptables (8),
 .BR iptables-save (8),
-.BR iptables-restore (8).
+.BR iptables-restore (8),
+.BR libipq (3).
 .P
 The packet-filtering-HOWTO details iptables usage for
 packet filtering, the NAT-HOWTO details NAT,
@@ -448,7 +461,7 @@
 .PP
 Jozsef Kadlecsik wrote the REJECT target.
 .PP
-Harald Welte wrote the ULOG target, TTL match+target and libipulog.
+Harald Welte wrote the ULOG and NFQUEUE target, the new libiptc, aswell as TTL match+target and libipulog.
 .PP
 The Netfilter Core Team is: Marc Boucher, Martin Josefsson, Jozsef Kadlecsik,
 James Morris, Harald Welte and Rusty Russell.
diff -urN iptables-1.3.2/ip6tables.c iptables-1.3.3/ip6tables.c
--- iptables-1.3.2/ip6tables.c	2005-06-24 18:34:19.000000000 +0200
+++ iptables-1.3.3/ip6tables.c	2005-07-29 15:08:15.000000000 +0200
@@ -430,7 +430,8 @@
 }
 
 static void
-add_command(int *cmd, const int newcmd, const int othercmds, int invert)
+add_command(unsigned int *cmd, const int newcmd, const int othercmds,
+	    int invert)
 {
 	if (invert)
 		exit_error(PARAMETER_PROBLEM, "unexpected ! flag");
@@ -1028,9 +1029,6 @@
 	unsigned int num_old, num_new, i;
 	struct option *merge;
 
-	/* Release previous options merged if any */
-	free_opts(0);
-
 	for (num_old = 0; oldopts[num_old].name; num_old++);
 	for (num_new = 0; newopts[num_new].name; num_new++);
 
@@ -1039,6 +1037,7 @@
 
 	merge = malloc(sizeof(struct option) * (num_new + num_old + 1));
 	memcpy(merge, oldopts, num_old * sizeof(struct option));
+	free_opts(0); /* Release previous options merged if any */
 	for (i = 0; i < num_new; i++) {
 		merge[num_old + i] = newopts[i];
 		merge[num_old + i].val += *option_offset;
diff -urN iptables-1.3.2/iptables.8.in iptables-1.3.3/iptables.8.in
--- iptables-1.3.2/iptables.8.in	2005-06-24 18:34:19.000000000 +0200
+++ iptables-1.3.3/iptables.8.in	2005-07-28 17:03:34.000000000 +0200
@@ -71,7 +71,19 @@
 .I DROP
 means to drop the packet on the floor.
 .I QUEUE
-means to pass the packet to userspace (if supported by the kernel).
+means to pass the packet to userspace.  (How the packet can be received
+by a userspace process differs by the particular queue handler.  2.4.x
+and 2.6.x kernels up to 2.6.13 include the 
+.B
+ip_queue
+queue handler.  Kernels 2.6.14 and later additionally include the 
+.B
+nfnetlink_queue
+queue handler.  Packets with a target of QUEUE will be sent to queue number '0'
+in this case. Please also see the
+.B
+NFQUEUE
+target as described later in this man page.)
 .I RETURN
 means stop traversing this chain and resume at the next rule in the
 previous (calling) chain.  If the end of a built-in chain is reached
@@ -440,7 +452,8 @@
 .BR iptables-restore (8),
 .BR ip6tables (8),
 .BR ip6tables-save (8),
-.BR ip6tables-restore (8).
+.BR ip6tables-restore (8),
+.BR libipq (3).
 .P
 The packet-filtering-HOWTO details iptables usage for
 packet filtering, the NAT-HOWTO details NAT,
@@ -451,7 +464,7 @@
 See
 .BR "http://www.netfilter.org/" .
 .SH AUTHORS
-Rusty Russell wrote iptables, in early consultation with Michael
+Rusty Russell originally wrote iptables, in early consultation with Michael
 Neuling.
 .PP
 Marc Boucher made Rusty abandon ipnatctl by lobbying for a generic packet
@@ -462,12 +475,12 @@
 .PP
 Jozsef Kadlecsik wrote the REJECT target.
 .PP
-Harald Welte wrote the ULOG target, TTL, DSCP, ECN matches and targets.
+Harald Welte wrote the ULOG and NFQUEUE target, the new libiptc, as well as the TTL, DSCP, ECN matches and targets.
 .PP
 The Netfilter Core Team is: Marc Boucher, Martin Josefsson, Jozsef Kadlecsik, 
 Patrick McHardy, James Morris, Harald Welte and Rusty Russell.
 .PP
-Man page written by Herve Eychenne <rv@wallfire.org>.
+Man page originally written by Herve Eychenne <rv@wallfire.org>.
 .\" .. and did I mention that we are incredibly cool people?
 .\" .. sexy, too ..
 .\" .. witty, charming, powerful ..
diff -urN iptables-1.3.2/iptables.c iptables-1.3.3/iptables.c
--- iptables-1.3.2/iptables.c	2005-06-24 18:34:19.000000000 +0200
+++ iptables-1.3.3/iptables.c	2005-07-29 15:06:45.000000000 +0200
@@ -484,7 +484,8 @@
 }
 
 static void
-add_command(int *cmd, const int newcmd, const int othercmds, int invert)
+add_command(unsigned int *cmd, const int newcmd, const int othercmds, 
+	    int invert)
 {
 	if (invert)
 		exit_error(PARAMETER_PROBLEM, "unexpected ! flag");
@@ -1028,9 +1029,6 @@
 	unsigned int num_old, num_new, i;
 	struct option *merge;
 
-	/* Release previous options merged if any */
-	free_opts(0);
-	
 	for (num_old = 0; oldopts[num_old].name; num_old++);
 	for (num_new = 0; newopts[num_new].name; num_new++);
 
@@ -1039,6 +1037,7 @@
 
 	merge = malloc(sizeof(struct option) * (num_new + num_old + 1));
 	memcpy(merge, oldopts, num_old * sizeof(struct option));
+	free_opts(0); /* Release previous options merged if any */
 	for (i = 0; i < num_new; i++) {
 		merge[num_old + i] = newopts[i];
 		merge[num_old + i].val += *option_offset;
diff -urN iptables-1.3.2/libipq/libipq.c iptables-1.3.3/libipq/libipq.c
--- iptables-1.3.2/libipq/libipq.c	2004-10-10 11:56:23.000000000 +0200
+++ iptables-1.3.3/libipq/libipq.c	2005-07-20 04:45:05.000000000 +0200
@@ -122,7 +122,8 @@
                                     unsigned char *buf, size_t len,
                                     int timeout)
 {
-	int addrlen, status;
+	unsigned int addrlen;
+	int status;
 	struct nlmsghdr *nlh;
 
 	if (len < sizeof(struct nlmsgerr)) {
diff -urN iptables-1.3.2/libiptc/libiptc.c iptables-1.3.3/libiptc/libiptc.c
--- iptables-1.3.2/libiptc/libiptc.c	2005-03-07 14:50:22.000000000 +0100
+++ iptables-1.3.3/libiptc/libiptc.c	2005-07-20 04:49:53.000000000 +0200
@@ -1,4 +1,4 @@
-/* Library which manipulates firewall rules.  Version $Revision: 3756 $ */
+/* Library which manipulates firewall rules.  Version $Revision: 4136 $ */
 
 /* Architecture of firewall rules is as follows:
  *
@@ -674,7 +674,7 @@
 
 /* calculate offset and number for every rule in the cache */
 static int iptcc_compile_chain_offsets(TC_HANDLE_T h, struct chain_head *c,
-				       int *offset, int *num)
+				       unsigned int *offset, unsigned int *num)
 {
 	struct rule_head *r;
 
@@ -798,7 +798,7 @@
 {
 	TC_HANDLE_T h;
 	STRUCT_GETINFO info;
-	int tmp;
+	unsigned int tmp;
 	socklen_t s;
 
 	iptc_fn = TC_INIT;
diff -urN iptables-1.3.2/Makefile iptables-1.3.3/Makefile
--- iptables-1.3.2/Makefile	2005-07-10 16:01:40.000000000 +0200
+++ iptables-1.3.3/Makefile	2005-07-29 15:17:49.000000000 +0200
@@ -14,8 +14,8 @@
 ifndef KERNEL_DIR
 KERNEL_DIR=/usr/src/linux
 endif
-IPTABLES_VERSION:=1.3.2
-OLD_IPTABLES_VERSION:=1.3.1
+IPTABLES_VERSION:=1.3.3
+OLD_IPTABLES_VERSION:=1.3.2
 
 PREFIX:=/usr/local
 LIBDIR:=$(PREFIX)/lib
