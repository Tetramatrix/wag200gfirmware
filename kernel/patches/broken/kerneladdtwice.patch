diff -urN -I \$.*\$ -X /tmp/kerndiff.JRiin6 --minimal linux-2.4.0-test10-official/include/linux/netfilter_ipv4/ip_conntrack.h working-2.4.0-test10/include/linux/netfilter_ipv4/ip_conntrack.h
--- linux-2.4.0-test10-official/include/linux/netfilter_ipv4/ip_conntrack.h	Tue Nov  7 15:33:02 2000
+++ working-2.4.0-test10/include/linux/netfilter_ipv4/ip_conntrack.h	Thu Nov  9 16:52:35 2000
@@ -50,19 +50,15 @@
 enum ip_conntrack_status {
 	/* It's an expected connection: bit 0 set.  This bit never changed */
 	IPS_EXPECTED_BIT = 0,
-	IPS_EXPECTED = (1 << IPS_EXPECTED_BIT),
 
 	/* We've seen packets both ways: bit 1 set.  Can be set, not unset. */
 	IPS_SEEN_REPLY_BIT = 1,
-	IPS_SEEN_REPLY = (1 << IPS_SEEN_REPLY_BIT),
 
 	/* Packet seen leaving box: bit 2 set.  Can be set, not unset. */
 	IPS_CONFIRMED_BIT = 2,
-	IPS_CONFIRMED = (1 << IPS_CONFIRMED_BIT),
 
 	/* Conntrack should never be early-expired. */
 	IPS_ASSURED_BIT = 4,
-	IPS_ASSURED = (1 << IPS_ASSURED_BIT),
 };
 
 struct ip_conntrack_expect
diff -urN -I \$.*\$ -X /tmp/kerndiff.JRiin6 --minimal linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_core.c working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_core.c
--- linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_core.c	Sun Aug 27 15:11:01 2000
+++ working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_core.c	Fri Nov 10 12:21:53 2000
@@ -174,7 +174,7 @@
 
 	/* Unconfirmed connections haven't been cleaned up by the
 	   timer: hence they cannot be simply deleted here. */
-	if (!(ct->status & IPS_CONFIRMED)) {
+	if (!test_bit(IPS_CONFIRMED_BIT, &ct->status)) {
 		WRITE_LOCK(&ip_conntrack_lock);
 		/* Race check: they can't get a reference if noone has
                    one and we have the write lock. */
@@ -207,7 +207,7 @@
 	struct ip_conntrack *ct = (void *)ul_conntrack;
 
 	WRITE_LOCK(&ip_conntrack_lock);
-	IP_NF_ASSERT(ct->status & IPS_CONFIRMED);
+	IP_NF_ASSERT(test_bit(IPS_CONFIRMED_BIT, &ct->status));
 	clean_from_lists(ct);
 	WRITE_UNLOCK(&ip_conntrack_lock);
 	ip_conntrack_put(ct);
@@ -260,7 +260,7 @@
 	DEBUGP("Confirming conntrack %p\n", ct);
 	WRITE_LOCK(&ip_conntrack_lock);
 	/* Race check */
-	if (!(ct->status & IPS_CONFIRMED)) {
+	if (!test_bit(IPS_CONFIRMED_BIT, &ct->status)) {
 		IP_NF_ASSERT(!timer_pending(&ct->timeout));
 		set_bit(IPS_CONFIRMED_BIT, &ct->status);
 		/* Timer relative to confirmation time, not original
@@ -376,7 +376,7 @@
 
 	/* REJECT target does this commonly, so allow locally
            generated ICMP errors --RR */
-	if (!(h->ctrack->status & IPS_CONFIRMED)
+	if (!test_bit(IPS_CONFIRMED_BIT, &h->ctrack->status)
 	    && hooknum != NF_IP_LOCAL_OUT) {
 		DEBUGP("icmp_error_track: unconfirmed\n");
 		ip_conntrack_put(h->ctrack);
@@ -394,8 +394,8 @@
 {
 	/* Unconfirmed connections either really fresh or transitory
            anyway */
-	if (!(i->ctrack->status & IPS_ASSURED)
-	    && (i->ctrack->status & IPS_CONFIRMED))
+	if (!test_bit(IPS_ASSURED_BIT, &i->ctrack->status)
+	    && test_bit(IPS_CONFIRMED_BIT, &i->ctrack->status))
 		return 1;
 	return 0;
 }
@@ -520,7 +520,7 @@
 			     struct ip_conntrack_expect *, tuple);
 	if (expected) {
 		/* Welcome, Mr. Bond.  We've been expecting you... */
-		conntrack->status = IPS_EXPECTED;
+		set_bit(IPS_EXPECTED_BIT, &conntrack->status);
 		conntrack->master.master = &expected->expectant->ct_general;
 		IP_NF_ASSERT(conntrack->master.master);
 		LIST_DELETE(&expect_list, expected);
@@ -572,7 +572,7 @@
 	/* It exists; we have (non-exclusive) reference. */
 	if (DIRECTION(h) == IP_CT_DIR_REPLY) {
 		/* Reply on unconfirmed connection => unclassifiable */
-		if (!(h->ctrack->status & IPS_CONFIRMED)) {
+		if (!test_bit(IPS_CONFIRMED_BIT, &h->ctrack->status)) {
 			/* Exception: local TCP RSTs (generated by
                            REJECT target). */
 			if (hooknum == NF_IP_LOCAL_OUT
@@ -598,11 +598,11 @@
 		*set_reply = 1;
 	} else {
 		/* Once we've had two way comms, always ESTABLISHED. */
-		if (h->ctrack->status & IPS_SEEN_REPLY) {
+		if (test_bit(IPS_SEEN_REPLY_BIT, &h->ctrack->status)) {
 			DEBUGP("ip_conntrack_in: normal packet for %p\n",
 			       h->ctrack);
 		        *ctinfo = IP_CT_ESTABLISHED;
-		} else if (h->ctrack->status & IPS_EXPECTED) {
+		} else if (test_bit(IPS_EXPECTED_BIT, &h->ctrack->status)) {
 			DEBUGP("ip_conntrack_in: related packet for %p\n",
 			       h->ctrack);
 			*ctinfo = IP_CT_RELATED;
@@ -862,7 +862,7 @@
 
 	WRITE_LOCK(&ip_conntrack_lock);
 	/* Timer may not be active yet */
-	if (!(ct->status & IPS_CONFIRMED))
+	if (!test_bit(IPS_CONFIRMED_BIT, &ct->status))
 		ct->timeout.expires = extra_jiffies;
 	else {
 		/* Need del_timer for race avoidance (may already be dying). */
@@ -943,7 +943,7 @@
 		/* Time to push up daises... */
 		if (del_timer(&h->ctrack->timeout))
 			death_by_timeout((unsigned long)h->ctrack);
-		else if (!(h->ctrack->status & IPS_CONFIRMED)) {
+		else if (!test_bit(IPS_CONFIRMED_BIT, &h->ctrack->status)) {
 			/* Unconfirmed connection.  Clean from lists,
 			   mark confirmed so it gets cleaned as soon
 			   as skb freed. */
@@ -951,7 +951,7 @@
 			/* Lock protects race against another setting
                            of confirmed bit.  set_bit isolates this
                            bit from the others. */
-			if (!(h->ctrack->status & IPS_CONFIRMED)) {
+			if (!test_bit(IPS_CONFIRMED_BIT, &h->ctrack->status)) {
 				clean_from_lists(h->ctrack);
 				set_bit(IPS_CONFIRMED_BIT, &h->ctrack->status);
 			}
diff -urN -I \$.*\$ -X /tmp/kerndiff.JRiin6 --minimal linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_proto_tcp.c working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_proto_tcp.c
--- linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_proto_tcp.c	Sat Aug 12 00:23:39 2000
+++ working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_proto_tcp.c	Thu Nov  9 16:38:37 2000
@@ -188,7 +188,7 @@
 	   have an established connection: this is a fairly common
 	   problem case, so we can delete the conntrack
 	   immediately.  --RR */
-	if (!(conntrack->status & IPS_SEEN_REPLY) && tcph->rst) {
+	if (!test_bit(IPS_SEEN_REPLY_BIT, &conntrack->status) && tcph->rst) {
 		if (del_timer(&conntrack->timeout))
 			conntrack->timeout.function((unsigned long)conntrack);
 	} else {
diff -urN -I \$.*\$ -X /tmp/kerndiff.JRiin6 --minimal linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_proto_udp.c working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_proto_udp.c
--- linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_proto_udp.c	Sat Aug 12 00:23:39 2000
+++ working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_proto_udp.c	Thu Nov  9 16:39:03 2000
@@ -51,7 +51,7 @@
 {
 	/* If we've seen traffic both ways, this is some kind of UDP
 	   stream.  Extend timeout. */
-	if (conntrack->status & IPS_SEEN_REPLY) {
+	if (test_bit(IPS_SEEN_REPLY_BIT, &conntrack->status)) {
 		ip_ct_refresh(conntrack, UDP_STREAM_TIMEOUT);
 		/* Also, more likely to be important, and not a probe */
 		set_bit(IPS_ASSURED_BIT, &conntrack->status);
diff -urN -I \$.*\$ -X /tmp/kerndiff.JRiin6 --minimal linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_standalone.c working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_standalone.c
--- linux-2.4.0-test10-official/net/ipv4/netfilter/ip_conntrack_standalone.c	Sun Aug 27 15:11:01 2000
+++ working-2.4.0-test10/net/ipv4/netfilter/ip_conntrack_standalone.c	Fri Nov 10 12:16:40 2000
@@ -65,7 +65,7 @@
 static unsigned int
 print_conntrack(char *buffer, const struct ip_conntrack *conntrack)
 {
-	unsigned int len;
+	unsigned int len, status = conntrack->status;
 	struct ip_conntrack_protocol *proto
 		= __find_proto(conntrack->tuplehash[IP_CT_DIR_ORIGINAL]
 			       .tuple.dst.protonum);
@@ -81,14 +81,14 @@
 	len += print_tuple(buffer + len,
 			   &conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple,
 			   proto);
-	if (!(conntrack->status & IPS_SEEN_REPLY))
+	if (!test_bit(IPS_SEEN_REPLY_BIT, &status))
 		len += sprintf(buffer + len, "[UNREPLIED] ");
 	len += print_tuple(buffer + len,
 			   &conntrack->tuplehash[IP_CT_DIR_REPLY].tuple,
 			   proto);
-	if (conntrack->status & IPS_ASSURED)
+	if (test_bit(IPS_ASSURED_BIT, &status))
 		len += sprintf(buffer + len, "[ASSURED] ");
-	if (!(conntrack->status & IPS_CONFIRMED))
+	if (!test_bit(IPS_CONFIRMED_BIT, &status))
 		len += sprintf(buffer + len, "[UNCONFIRMED] ");
 	len += sprintf(buffer + len, "use=%u ",
 		       atomic_read(&conntrack->ct_general.use));
@@ -181,7 +181,7 @@
 		enum ip_conntrack_info ctinfo = (*pskb)->nfct - ct->infos;
 
 		if ((ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED)
-		    && !(ct->status & IPS_CONFIRMED))
+		    && !test_bit(IPS_CONFIRMED_BIT, &ct->status))
 			ip_conntrack_confirm(ct);
 	}
 	return NF_ACCEPT;
diff -urN -I \$.*\$ -X /tmp/kerndiff.JRiin6 --minimal linux-2.4.0-test10-official/net/ipv4/netfilter/ip_fw_compat.c working-2.4.0-test10/net/ipv4/netfilter/ip_fw_compat.c
--- linux-2.4.0-test10-official/net/ipv4/netfilter/ip_fw_compat.c	Wed Oct  4 15:17:12 2000
+++ working-2.4.0-test10/net/ipv4/netfilter/ip_fw_compat.c	Thu Nov  9 16:40:18 2000
@@ -78,7 +78,7 @@
 		enum ip_conntrack_info ctinfo = skb->nfct - ct->infos;
 
 		if ((ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED)
-		    && !(ct->status & IPS_CONFIRMED))
+		    && !(test_bit(IPS_CONFIRMED_BIT, &ct->status)))
 			ip_conntrack_confirm(ct);
 	}
 }