diff --exclude '*.orig' -Nru linux-2.4.24/include/linux/netfilter_packet.h linux-2.4.24-nfpacket/include/linux/netfilter_packet.h
--- linux-2.4.24/include/linux/netfilter_packet.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.24-nfpacket/include/linux/netfilter_packet.h	2004-02-02 16:39:40.846392248 +0100
@@ -0,0 +1,17 @@
+#ifndef __LINUX_NETFILTER_PACKET_H
+#define __LINUX_NETFILTER_PACKET_H
+
+/* PF_PACKET-specific defines for netfilter.
+ * Written by Marc Zyngier <Marc.Zyngier@evidian.com>
+ * (C)2002 Evidian -- This code is GPL.
+ */
+
+#include <linux/config.h>
+#include <linux/netfilter.h>
+
+/* PF_PACKET filter hooks */
+
+#define NF_PACKET_INPUT		0
+#define NF_PACKET_OUTPUT	1
+
+#endif /* __LINUX_NETFILTER_PACKET_H */
diff --exclude '*.orig' -Nru linux-2.4.24/net/core/dev.c linux-2.4.24-nfpacket/net/core/dev.c
--- linux-2.4.24/net/core/dev.c	2003-11-28 19:26:21.000000000 +0100
+++ linux-2.4.24-nfpacket/net/core/dev.c	2004-02-02 16:39:40.873388144 +0100
@@ -100,6 +100,7 @@
 #include <linux/init.h>
 #include <linux/kmod.h>
 #include <linux/module.h>
+#include <linux/netfilter_packet.h>
 #if defined(CONFIG_NET_RADIO) || defined(CONFIG_NET_PCMCIA_RADIO)
 #include <linux/wireless.h>		/* Note : will define WIRELESS_EXT */
 #include <net/iw_handler.h>
@@ -1032,40 +1033,11 @@
  *	to congestion or traffic shaping.
  */
 
-int dev_queue_xmit(struct sk_buff *skb)
+static inline int dev_queue_xmit_finish(struct sk_buff *skb)
 {
 	struct net_device *dev = skb->dev;
 	struct Qdisc  *q;
 
-	if (skb_shinfo(skb)->frag_list &&
-	    !(dev->features&NETIF_F_FRAGLIST) &&
-	    skb_linearize(skb, GFP_ATOMIC) != 0) {
-		kfree_skb(skb);
-		return -ENOMEM;
-	}
-
-	/* Fragmented skb is linearized if device does not support SG,
-	 * or if at least one of fragments is in highmem and device
-	 * does not support DMA from it.
-	 */
-	if (skb_shinfo(skb)->nr_frags &&
-	    (!(dev->features&NETIF_F_SG) || illegal_highdma(dev, skb)) &&
-	    skb_linearize(skb, GFP_ATOMIC) != 0) {
-		kfree_skb(skb);
-		return -ENOMEM;
-	}
-
-	/* If packet is not checksummed and device does not support
-	 * checksumming for this protocol, complete checksumming here.
-	 */
-	if (skb->ip_summed == CHECKSUM_HW &&
-	    (!(dev->features&(NETIF_F_HW_CSUM|NETIF_F_NO_CSUM)) &&
-	     (!(dev->features&NETIF_F_IP_CSUM) ||
-	      skb->protocol != htons(ETH_P_IP)))) {
-		if ((skb = skb_checksum_help(skb)) == NULL)
-			return -ENOMEM;
-	}
-
 	/* Grab device queue */
 	spin_lock_bh(&dev->queue_lock);
 	q = dev->qdisc;
@@ -1125,6 +1097,43 @@
 	return -ENETDOWN;
 }
 
+int dev_queue_xmit(struct sk_buff *skb)
+{
+	struct net_device *dev = skb->dev;
+
+	if (skb_shinfo(skb)->frag_list &&
+	    !(dev->features&NETIF_F_FRAGLIST) &&
+	    skb_linearize(skb, GFP_ATOMIC) != 0) {
+		kfree_skb(skb);
+		return -ENOMEM;
+	}
+
+	/* Fragmented skb is linearized if device does not support SG,
+	 * or if at least one of fragments is in highmem and device
+	 * does not support DMA from it.
+	 */
+	if (skb_shinfo(skb)->nr_frags &&
+	    (!(dev->features&NETIF_F_SG) || illegal_highdma(dev, skb)) &&
+	    skb_linearize(skb, GFP_ATOMIC) != 0) {
+		kfree_skb(skb);
+		return -ENOMEM;
+	}
+
+	/* If packet is not checksummed and device does not support
+	 * checksumming for this protocol, complete checksumming here.
+	 */
+	if (skb->ip_summed == CHECKSUM_HW &&
+	    (!(dev->features&(NETIF_F_HW_CSUM|NETIF_F_NO_CSUM)) &&
+	     (!(dev->features&NETIF_F_IP_CSUM) ||
+	      skb->protocol != htons(ETH_P_IP)))) {
+		if ((skb = skb_checksum_help(skb)) == NULL)
+			return -ENOMEM;
+	}
+
+	return NF_HOOK(PF_PACKET, NF_PACKET_OUTPUT, skb, NULL, dev,
+		       dev_queue_xmit_finish);
+}
+
 
 /*=======================================================================
 			Receiver routines
@@ -1458,28 +1467,12 @@
 }
 #endif   /* CONFIG_NET_DIVERT */
 
-int netif_receive_skb(struct sk_buff *skb)
+static inline int netif_receive_skb_finish(struct sk_buff *skb)
 {
 	struct packet_type *ptype, *pt_prev;
 	int ret = NET_RX_DROP;
 	unsigned short type = skb->protocol;
 
-	if (skb->stamp.tv_sec == 0)
-		do_gettimeofday(&skb->stamp);
-
-	skb_bond(skb);
-
-	netdev_rx_stat[smp_processor_id()].total++;
-
-#ifdef CONFIG_NET_FASTROUTE
-	if (skb->pkt_type == PACKET_FASTROUTE) {
-		netdev_rx_stat[smp_processor_id()].fastroute_deferred_out++;
-		return dev_queue_xmit(skb);
-	}
-#endif
-
-	skb->h.raw = skb->nh.raw = skb->data;
-
 	pt_prev = NULL;
 	for (ptype = ptype_all; ptype; ptype = ptype->next) {
 		if (!ptype->dev || ptype->dev == skb->dev) {
@@ -1539,6 +1532,28 @@
 	return ret;
 }
 
+int netif_receive_skb(struct sk_buff *skb)
+{
+	if (skb->stamp.tv_sec == 0)
+		do_gettimeofday(&skb->stamp);
+
+	skb_bond(skb);
+
+	netdev_rx_stat[smp_processor_id()].total++;
+
+#ifdef CONFIG_NET_FASTROUTE
+	if (skb->pkt_type == PACKET_FASTROUTE) {
+		netdev_rx_stat[smp_processor_id()].fastroute_deferred_out++;
+		return dev_queue_xmit(skb);
+	}
+#endif
+
+	skb->h.raw = skb->nh.raw = skb->data;
+
+	return NF_HOOK(PF_PACKET, NF_PACKET_INPUT, skb, skb->dev, NULL,
+		       netif_receive_skb_finish);
+}
+
 static int process_backlog(struct net_device *backlog_dev, int *budget)
 {
 	int work = 0;
diff --exclude '*.orig' -Nru linux-2.4.24/net/packet/af_packet.c linux-2.4.24-nfpacket/net/packet/af_packet.c
--- linux-2.4.24/net/packet/af_packet.c	2003-08-25 13:44:44.000000000 +0200
+++ linux-2.4.24-nfpacket/net/packet/af_packet.c	2004-02-02 16:39:40.895384800 +0100
@@ -77,6 +77,10 @@
 #include <net/inet_common.h>
 #endif
 
+#ifdef CONFIG_NETFILTER
+#include <linux/netfilter.h>
+#endif
+
 #ifdef CONFIG_DLCI
 extern int dlci_ioctl(unsigned int, void*);
 #endif
@@ -1321,7 +1325,12 @@
 	}
 #endif
 	default:
+#ifdef CONFIG_NETFILTER
+	        return nf_setsockopt(sock->sk, PF_PACKET, optname, optval,
+				     optlen);
+#else
 		return -ENOPROTOOPT;
+#endif
 	}
 }
 
@@ -1358,7 +1367,12 @@
 		break;
 	}
 	default:
+#ifdef CONFIG_NETFILTER
+	  	return nf_getsockopt(sock->sk, PF_PACKET, optname, optval,
+				     optlen);
+#else
 		return -ENOPROTOOPT;
+#endif
 	}
 
   	if (put_user(len, optlen))
