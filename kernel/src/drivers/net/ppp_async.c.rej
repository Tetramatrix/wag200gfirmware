***************
*** 16,23 ****
   * Part of the code in this driver was inspired by the old async-only
   * PPP driver, written by Michael Callahan and Al Longyear, and
   * subsequently hacked by Paul Mackerras.
-  *
-  * ==FILEVERSION 20000227==
   */
  
  #include <linux/module.h>
--- 16,21 ----
   * Part of the code in this driver was inspired by the old async-only
   * PPP driver, written by Michael Callahan and Al Longyear, and
   * subsequently hacked by Paul Mackerras.
   */
  
  #include <linux/module.h>
***************
*** 870,896 ****
  				skb = dev_alloc_skb(ap->mru + PPP_HDRLEN + 2);
  				if (skb == 0)
  					goto nomem;
- 				ap->rpkt = skb
- 			}
   			if (skb->len == 0) {
- 				int headroom = 0;
- 				/* Try to get the payload 4-byte aligned.
   				 * This should match the
   				 * PPP_ALLSTATIONS/PPP_UI/compressed tests in
   				 * process_input_packet, but we do not have
   				 * enough chars here to test buf[1] and buf[2].
   				 */
  				if (buf[0] != PPP_ALLSTATIONS)
- 					headroom += 2;
- 					if (buf[0] & 1)
- 						headroom += 1;
- 					skb_reserve(skb, headroom);
- 
- 				ap->rpkt = skb;
  			}
  			if (n > skb_tailroom(skb)) {
  				/* packet overflowed MRU */
- 				input_error(ap, 1);
  			} else {
  				sp = skb_put(skb, n);
  				memcpy(sp, buf, n);
--- 887,907 ----
  				skb = dev_alloc_skb(ap->mru + PPP_HDRLEN + 2);
  				if (skb == 0)
  					goto nomem;
+  				ap->rpkt = skb;
+  			}
   			if (skb->len == 0) {
+  				/* Try to get the payload 4-byte aligned.
   				 * This should match the
   				 * PPP_ALLSTATIONS/PPP_UI/compressed tests in
   				 * process_input_packet, but we do not have
   				 * enough chars here to test buf[1] and buf[2].
   				 */
  				if (buf[0] != PPP_ALLSTATIONS)
+ 					skb_reserve(skb, 2 + (buf[0] & 1));
  			}
  			if (n > skb_tailroom(skb)) {
  				/* packet overflowed MRU */
+ 				ap->state |= SC_TOSS;
  			} else {
  				sp = skb_put(skb, n);
  				memcpy(sp, buf, n);
